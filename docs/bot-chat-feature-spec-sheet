## Requirements Document: Fake Discord-Style Chat Feature

### 1. Overview
**Feature Name:** AI Bot Chat (Internal name: "LogChat")  
**Priority:** Experimental/Medium  
**Timeline:** Phased implementation  
**Target:** Enhance user engagement and provide insights through entertainment

### 2. Core Requirements

#### 2.1 Chat Interface
- **Discord-style UI** with message bubbles, timestamps, and bot avatars
- **Scrollable chat history** with newest messages at bottom
- **Bot indicators** (different colors/avatars for each bot personality)
- **Message grouping** when same bot sends multiple messages
- **Responsive design** that works within existing app layout

#### 2.2 Bot Personalities & Behaviors
```dart
// CP: Bot personality definitions
enum BotType {
  statsBot,    // Data-driven, trends focused
  concernBot,  // Supportive, caring
  chaosBot,    // Snarky, chaotic
  coachBot,    // Motivational, tough-love
  memoryBot,   // Past patterns, nostalgia
}
```

**StatsBot Requirements:**
- Analyze numerical patterns (streaks, frequencies, counts)
- Generate messages about trends and statistics
- Focus on achievements and data points

**ConcernBot Requirements:**
- Monitor for missing health/wellness entries
- Supportive tone for difficult periods
- Empathetic responses to emotional content

**ChaosBot Requirements:**
- Point out contradictions or funny combinations
- Sarcastic but not mean-spirited
- Highlight unusual or unexpected entries

**CoachBot Requirements:**
- Motivational messaging for goals/fitness
- Call out missed opportunities
- Encouraging but direct tone

**MemoryBot Requirements:**
- Reference past entries and patterns
- Nostalgic comparisons ("remember when...")
- Seasonal or temporal pattern recognition

#### 2.3 Data Analysis Requirements
- **Recent activity analysis** (last 24h, 7d, 30d)
- **Pattern recognition** for streaks, gaps, categories
- **Sentiment analysis** for entry content
- **Frequency analysis** per category
- **Trigger detection** for bot message generation

#### 2.4 Message Generation
- **Context-aware messaging** based on recent logs
- **Personality-consistent language** for each bot
- **Reference linkage** to specific entries
- **Anti-spam logic** to prevent message flooding
- **Variety in responses** to avoid repetition

### 3. Technical Architecture

#### 3.1 New Components Needed
```dart
// CP: Core chat architecture
class LogChatCubit extends Cubit<LogChatState> {}
class LogChatState extends Equatable {}
class BotMessage extends Equatable {}
class BotPersonality {}
class MessageGenerator {}
class LogAnalyzer {}
```

#### 3.2 Integration Points
- **Hook into EntryCubit** to trigger analysis on new entries
- **Access to entries repository** for historical data
- **Shared preferences** for chat history persistence
- **Optional AI service integration** for advanced language generation

#### 3.3 UI Integration
- **New tab or section** in main app navigation
- **Entry in hamburger menu** or as floating action
- **Notification badges** for new bot messages
- **Deep linking** from bot messages to referenced entries

### 4. User Experience Flow

#### 4.1 Access Patterns
1. User opens LogChat section
2. Sees recent bot conversations
3. Can scroll through chat history
4. Taps on entry references to view details
5. Receives notifications for interesting new bot insights

#### 4.2 Message Triggers
- **New entry added** → Immediate bot analysis
- **Daily summary** → End-of-day bot discussion
- **Weekly review** → Pattern analysis and insights
- **Streak milestones** → Celebration messages
- **Missing patterns** → Gentle reminders or concern

### 5. Implementation Phases

#### Phase 1: Basic Infrastructure
- [ ] Create chat UI components
- [ ] Implement basic bot personalities
- [ ] Simple message generation from recent entries
- [ ] Basic chat state management

#### Phase 2: Enhanced Analysis
- [ ] Pattern recognition algorithms
- [ ] More sophisticated message triggers
- [ ] Entry reference linking
- [ ] Message persistence

#### Phase 3: Advanced Features
- [ ] Bot interactions/conversations
- [ ] User interaction with messages (likes, replies)
- [ ] Notification system
- [ ] Advanced AI integration

### 6. Success Metrics
- **User engagement** with chat feature
- **Time spent** in LogChat section
- **Entry reference clicks** (bot messages leading to entry views)
- **Retention improvement** for users with chat enabled
- **User feedback** on bot personality effectiveness

### 7. Technical Considerations

#### 7.1 Performance
- **Efficient log analysis** to avoid UI blocking
- **Smart caching** of generated messages
- **Lazy loading** of chat history
- **Background processing** for complex analysis

#### 7.2 Privacy & Data
- **Local processing** of user data preferred
- **No external AI calls** for sensitive content
- **User control** over bot chattiness levels
- **Data retention policies** for chat messages

#### 7.3 Customization
- **Bot personality toggles** (enable/disable specific bots)
- **Message frequency controls**
- **Chat history management** (clear, export)
- **Notification preferences**

### 8. Open Questions for Discussion
1. Should this be a separate tab or integrated into existing chat?
2. How often should bots generate new messages?
3. Should users be able to "respond" to bots?
4. How much chat history should we preserve?
5. Should bots ever disagree with each other for entertainment?
6. Integration with existing AI service or separate local processing?

 Also, to answer some of these questions, at the bottom, uh, this should be a separate tab. And as for how often should bots generate new messages, right now I want it to seem like an active chat going back and forth like every few seconds. But like that could be a lot overtime, right? But so for right now, let's, let's, let's, let's do that. Like I really wanna test this feature out so we can have them responding back and forth kinda like a normal human. Like they have to take time to type and stuff like that to respond back and forth. Right now, users don't have to respond to bots. We can worry about that later. How much chat history should we preserve? We don't have to like save any chat history like in shared preferences or anything. Just whatever is in local memories. Just keep it. Yeah, that botch should definitely disagree with each other. For entertainment, that would be that's awesome. Yes, and integrate with the existing AI service that we have. You can obviously add new stuff to AI service to make this work and hook it up. Yeah, please don't modify anything. Like don't modify any of the methods that we're already using elsewhere, like create new stuff for this.