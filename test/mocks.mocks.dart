// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/entry/cubit/entry_cubit.dart' as _i2;
import 'package:myapp/entry/entry.dart' as _i6;
import 'package:myapp/entry/repository/entry_repository.dart' as _i10;
import 'package:myapp/pages/cubit/home_screen_cubit.dart' as _i9;
import 'package:myapp/pages/cubit/home_screen_state.dart' as _i4;
import 'package:myapp/widgets/voice_input/cubit/voice_input_cubit.dart' as _i8;
import 'package:myapp/widgets/voice_input/cubit/voice_input_state.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEntryState_0 extends _i1.SmartFake implements _i2.EntryState {
  _FakeEntryState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVoiceInputState_1 extends _i1.SmartFake
    implements _i3.VoiceInputState {
  _FakeVoiceInputState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHomeScreenState_2 extends _i1.SmartFake
    implements _i4.HomeScreenState {
  _FakeHomeScreenState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [EntryCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntryCubit extends _i1.Mock implements _i2.EntryCubit {
  MockEntryCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EntryState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeEntryState_0(this, Invocation.getter(#state)),
          )
          as _i2.EntryState);

  @override
  _i5.Stream<_i2.EntryState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.EntryState>.empty(),
          )
          as _i5.Stream<_i2.EntryState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void showTemporaryEntry(_i6.Entry? tempEntry) => super.noSuchMethod(
    Invocation.method(#showTemporaryEntry, [tempEntry]),
    returnValueForMissingStub: null,
  );

  @override
  void finalizeProcessing(List<_i6.Entry>? finalEntries) => super.noSuchMethod(
    Invocation.method(#finalizeProcessing, [finalEntries]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> addEntry(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#addEntry, [text]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addEntryObject(_i6.Entry? entryToAdd) =>
      (super.noSuchMethod(
            Invocation.method(#addEntryObject, [entryToAdd]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteEntry(_i6.Entry? entryToDelete) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEntry, [entryToDelete]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> updateEntry(
    _i6.Entry? originalEntry,
    _i6.Entry? updatedEntry,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateEntry, [originalEntry, updatedEntry]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> addCustomCategory(String? newCategory) =>
      (super.noSuchMethod(
            Invocation.method(#addCustomCategory, [newCategory]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteCategory(String? categoryToDelete) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [categoryToDelete]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> renameCategory(String? oldName, String? newName) =>
      (super.noSuchMethod(
            Invocation.method(#renameCategory, [oldName, newName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void setFilter(String? category) => super.noSuchMethod(
    Invocation.method(#setFilter, [category]),
    returnValueForMissingStub: null,
  );

  @override
  void clearLastError() => super.noSuchMethod(
    Invocation.method(#clearLastError, []),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.EntryState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i2.EntryState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [VoiceInputCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockVoiceInputCubit extends _i1.Mock implements _i8.VoiceInputCubit {
  MockVoiceInputCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.VoiceInputState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeVoiceInputState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.VoiceInputState);

  @override
  _i5.Stream<_i3.VoiceInputState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.VoiceInputState>.empty(),
          )
          as _i5.Stream<_i3.VoiceInputState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i5.Future<void> requestMicrophonePermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestMicrophonePermission, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> toggleRecording() =>
      (super.noSuchMethod(
            Invocation.method(#toggleRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopRecordingAndCombine(
    String? initialText,
    DateTime? processingTimestamp,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#stopRecordingAndCombine, [
              initialText,
              processingTimestamp,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> transcribeAudio() =>
      (super.noSuchMethod(
            Invocation.method(#transcribeAudio, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void clearTranscribedText() => super.noSuchMethod(
    Invocation.method(#clearTranscribedText, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearErrorState() => super.noSuchMethod(
    Invocation.method(#clearErrorState, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void emit(_i3.VoiceInputState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i3.VoiceInputState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [HomeScreenCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeScreenCubit extends _i1.Mock implements _i9.HomeScreenCubit {
  MockHomeScreenCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HomeScreenState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeHomeScreenState_2(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.HomeScreenState);

  @override
  _i5.Stream<_i4.HomeScreenState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i4.HomeScreenState>.empty(),
          )
          as _i5.Stream<_i4.HomeScreenState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i5.Future<void> loadVersionInfo() =>
      (super.noSuchMethod(
            Invocation.method(#loadVersionInfo, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> checkWhatsNew() =>
      (super.noSuchMethod(
            Invocation.method(#checkWhatsNew, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> markWhatsNewShown() =>
      (super.noSuchMethod(
            Invocation.method(#markWhatsNewShown, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void setInputFocus(bool? hasFocus) => super.noSuchMethod(
    Invocation.method(#setInputFocus, [hasFocus]),
    returnValueForMissingStub: null,
  );

  @override
  void incrementTitleTap() => super.noSuchMethod(
    Invocation.method(#incrementTitleTap, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearSnackBarMessage() => super.noSuchMethod(
    Invocation.method(#clearSnackBarMessage, []),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i4.HomeScreenState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i4.HomeScreenState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [EntryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntryRepository extends _i1.Mock implements _i10.EntryRepository {
  MockEntryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Entry> get currentEntries =>
      (super.noSuchMethod(
            Invocation.getter(#currentEntries),
            returnValue: <_i6.Entry>[],
          )
          as List<_i6.Entry>);

  @override
  List<String> get currentCategories =>
      (super.noSuchMethod(
            Invocation.getter(#currentCategories),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.Entry>> addEntry(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#addEntry, [text]),
            returnValue: _i5.Future<List<_i6.Entry>>.value(<_i6.Entry>[]),
          )
          as _i5.Future<List<_i6.Entry>>);

  @override
  _i5.Future<List<_i6.Entry>> addEntryObject(_i6.Entry? entryToAdd) =>
      (super.noSuchMethod(
            Invocation.method(#addEntryObject, [entryToAdd]),
            returnValue: _i5.Future<List<_i6.Entry>>.value(<_i6.Entry>[]),
          )
          as _i5.Future<List<_i6.Entry>>);

  @override
  _i5.Future<List<_i6.Entry>> deleteEntry(_i6.Entry? entryToDelete) =>
      (super.noSuchMethod(
            Invocation.method(#deleteEntry, [entryToDelete]),
            returnValue: _i5.Future<List<_i6.Entry>>.value(<_i6.Entry>[]),
          )
          as _i5.Future<List<_i6.Entry>>);

  @override
  _i5.Future<List<_i6.Entry>> updateEntry(
    _i6.Entry? originalEntry,
    _i6.Entry? updatedEntry,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateEntry, [originalEntry, updatedEntry]),
            returnValue: _i5.Future<List<_i6.Entry>>.value(<_i6.Entry>[]),
          )
          as _i5.Future<List<_i6.Entry>>);

  @override
  _i5.Future<List<_i6.Entry>> processCombinedEntry(
    String? combinedText,
    DateTime? tempEntryTimestamp,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#processCombinedEntry, [
              combinedText,
              tempEntryTimestamp,
            ]),
            returnValue: _i5.Future<List<_i6.Entry>>.value(<_i6.Entry>[]),
          )
          as _i5.Future<List<_i6.Entry>>);

  @override
  _i5.Future<List<String>> addCustomCategory(String? newCategory) =>
      (super.noSuchMethod(
            Invocation.method(#addCustomCategory, [newCategory]),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<({List<String> categories, List<_i6.Entry> entries})>
  deleteCategory(String? categoryToDelete) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [categoryToDelete]),
            returnValue: _i5.Future<
              ({List<String> categories, List<_i6.Entry> entries})
            >.value((categories: <String>[], entries: <_i6.Entry>[])),
          )
          as _i5.Future<({List<String> categories, List<_i6.Entry> entries})>);

  @override
  _i5.Future<({List<String> categories, List<_i6.Entry> entries})>
  renameCategory(String? oldName, String? newName) =>
      (super.noSuchMethod(
            Invocation.method(#renameCategory, [oldName, newName]),
            returnValue: _i5.Future<
              ({List<String> categories, List<_i6.Entry> entries})
            >.value((categories: <String>[], entries: <_i6.Entry>[])),
          )
          as _i5.Future<({List<String> categories, List<_i6.Entry> entries})>);

  @override
  _i5.Future<bool> markEntryAsNotNew(DateTime? timestamp, String? text) =>
      (super.noSuchMethod(
            Invocation.method(#markEntryAsNotNew, [timestamp, text]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
